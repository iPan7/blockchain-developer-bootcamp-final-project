{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","state","loaded","kycAddress","tokenSaleAddress","userTokens","componentDidMount","eth","getAccounts","accounts","getChainId","networkId","myToken","Contract","MyToken","abi","networks","address","myTokenSale","MyTokenSale","kycContract","KycContract","listenToTokenTransfer","setState","_address","updateUserTokens","alert","error","handleBuyToken","methods","buyTokens","send","from","value","balanceOf","call","events","Transfer","to","on","handleInputChange","event","target","type","checked","name","handleKycSubmit","setKycCompleted","this","className","onChange","onClick","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e13779e6.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport MyToken from \"./contracts/MyToken.json\";\nimport MyTokenSale from \"./contracts/MyTokenSale.json\";\nimport KycContract from \"./contracts/KycContract.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\nimport '@metamask/legacy-web3';\n\nclass App extends Component {\n  state = { loaded: false, kycAddress: \"Enter wallet address\", tokenSaleAddress: \"\", userTokens: 0 };\n\n  componentDidMount = async () => {\n    try {\n        // Get network provider and web3 instance.\n        this.web3 = await getWeb3();\n\n        // Use web3 to get the user's accounts.\n        this.accounts = await this.web3.eth.getAccounts();\n\n        // Get the contract instance.\n        //this.networkId = await this.web3.eth.net.getId(); <<- this doesn't work with MetaMask anymore\n        this.networkId = await this.web3.eth.getChainId();      \n\n        this.myToken = new this.web3.eth.Contract(\n          MyToken.abi,\n          MyToken.networks[this.networkId] && MyToken.networks[this.networkId].address,\n        );\n\n        this.myTokenSale = new this.web3.eth.Contract(\n          MyTokenSale.abi,\n          MyTokenSale.networks[this.networkId] && MyTokenSale.networks[this.networkId].address,\n        );\n        this.kycContract = new this.web3.eth.Contract(\n          KycContract.abi,\n          KycContract.networks[this.networkId] && KycContract.networks[this.networkId].address,\n        );\n\n        // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n        this.listenToTokenTransfer();\n        this.setState({ loaded:true, tokenSaleAddress: this.myTokenSale._address }, this.updateUserTokens);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  handleBuyToken = async () => {\n    await this.myTokenSale.methods.buyTokens(this.accounts[0]).send({from: this.accounts[0], value: 1});\n  }\n\n  updateUserTokens = async() => {\n    let userTokens = await this.myToken.methods.balanceOf(this.accounts[0]).call();\n    this.setState({userTokens: userTokens});\n  }\n\n  listenToTokenTransfer = async() => {\n    this.myToken.events.Transfer({to: this.accounts[0]}).on(\"data\", this.updateUserTokens);\n  }\n\n\n  handleInputChange = (event) => {\n    const target = event.target;\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\n    const name = target.name;\n    this.setState({\n      [name]: value\n    });\n  }\n\n\n  handleKycSubmit = async () => {\n    const {kycAddress} = this.state;\n    await this.kycContract.methods.setKycCompleted(kycAddress).send({from: this.accounts[0]});\n    alert(\"Account \"+kycAddress+\" is now whitelisted\");\n  }\n\n  render() {\n    if (!this.state.loaded) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n      <h1>SaltCoin, the Cryptocurrency for Salty People</h1>\n\n<h2>Step 1: Whitelist your account by copy pasting your Metamask wallet address here.</h2>\nAddress to allow: <input type=\"text\" name=\"kycAddress\" value={this.state.kycAddress} onChange={this.handleInputChange} />\n<button type=\"button\" onClick={this.handleKycSubmit}>Add Address to Whitelist</button>\n<h2>Step 2: Buy SaltCoin by clicking the buy button</h2>\n        <p>When you click the button, ether will be sent to this address: {this.state.tokenSaleAddress}</p>\n        <button type=\"button\" onClick={this.handleBuyToken}>Buy a token</button>\n        <h2>Step 3: See your Salt Coin Balance below!</h2>\n        <p>You have {this.state.userTokens} Salt Coins</p>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}